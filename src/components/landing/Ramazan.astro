<div
  class="flex justify-between max-w-4xl mx-auto mb-2 border-b border-gray-700"
>
  <div class="flex justify-start gap-2">
    <span>🌐</span>
    <select
      id="citySelect"
      name="city"
      class="max-w-20 focus:outline-none focus:ring-0 focus:border-none active:outline-none active:ring-0 active:border-none flex bg-transparent items-right justify-right mb-2 text-sm dark:text-white"
    >
      <option value="Istanbul">İstanbul</option>
      <option value="Adana">Adana</option>
      <option value="Adiyaman">Adıyaman</option>
      <option value="Afyonkarahisar">Afyonkarahisar</option>
      <option value="Agri">Ağrı</option>
      <option value="Aksaray">Aksaray</option>
      <option value="Amasya">Amasya</option>
      <option value="Ankara">Ankara</option>
      <option value="Antalya">Antalya</option>
      <option value="Ardahan">Ardahan</option>
      <option value="Artvin">Artvin</option>
      <option value="Aydin">Aydın</option>
      <option value="Balikesir">Balıkesir</option>
      <option value="Bartin">Bartın</option>
      <option value="Batman">Batman</option>
      <option value="Bayburt">Bayburt</option>
      <option value="Bilecik">Bilecik</option>
      <option value="Bingol">Bingöl</option>
      <option value="Bitlis">Bitlis</option>
      <option value="Bolu">Bolu</option>
      <option value="Burdur">Burdur</option>
      <option value="Bursa">Bursa</option>
      <option value="Canakkale">Çanakkale</option>
      <option value="Cankiri">Çankırı</option>
      <option value="Corum">Çorum</option>
      <option value="Denizli">Denizli</option>
      <option value="Diyarbakir">Diyarbakır</option>
      <option value="Duzce">Düzce</option>
      <option value="Edirne">Edirne</option>
      <option value="Elazig">Elazığ</option>
      <option value="Erzincan">Erzincan</option>
      <option value="Erzurum">Erzurum</option>
      <option value="Eskisehir">Eskişehir</option>
      <option value="Gaziantep">Gaziantep</option>
      <option value="Giresun">Giresun</option>
      <option value="Gumushane">Gümüşhane</option>
      <option value="Hakkari">Hakkâri</option>
      <option value="Hatay">Hatay</option>
      <option value="Igdir">Iğdır</option>
      <option value="Isparta">Isparta</option>
      <option value="Izmir">İzmir</option>
      <option value="Kahramanmaras">Kahramanmaraş</option>
      <option value="Karabuk">Karabük</option>
      <option value="Karaman">Karaman</option>
      <option value="Kars">Kars</option>
      <option value="Kastamonu">Kastamonu</option>
      <option value="Kayseri">Kayseri</option>
      <option value="Kirikkale">Kırıkkale</option>
      <option value="Kirklareli">Kırklareli</option>
      <option value="Kirsehir">Kırşehir</option>
      <option value="Kilis">Kilis</option>
      <option value="Kocaeli">Kocaeli</option>
      <option value="Konya">Konya</option>
      <option value="Kutahya">Kütahya</option>
      <option value="Malatya">Malatya</option>
      <option value="Manisa">Manisa</option>
      <option value="Mardin">Mardin</option>
      <option value="Mersin">Mersin</option>
      <option value="Mugla">Muğla</option>
      <option value="Mus">Muş</option>
      <option value="Nevsehir">Nevşehir</option>
      <option value="Nigde">Niğde</option>
      <option value="Ordu">Ordu</option>
      <option value="Osmaniye">Osmaniye</option>
      <option value="Rize">Rize</option>
      <option value="Sakarya">Sakarya</option>
      <option value="Samsun">Samsun</option>
      <option value="Siirt">Siirt</option>
      <option value="Sinop">Sinop</option>
      <option value="Sivas">Sivas</option>
      <option value="Sanliurfa">Şanlıurfa</option>
      <option value="Sirnak">Şırnak</option>
      <option value="Tekirdag">Tekirdağ</option>
      <option value="Tokat">Tokat</option>
      <option value="Trabzon">Trabzon</option>
      <option value="Tunceli">Tunceli</option>
      <option value="Usak">Uşak</option>
      <option value="Van">Van</option>
      <option value="Yalova">Yalova</option>
      <option value="Yozgat">Yozgat</option>
      <option value="Zonguldak">Zonguldak</option>
    </select>
  </div>

  <div
    id="currentTime"
    class="flex items-right justify-right mb-2 dark:text-white"
  >
  </div>
  <div class="flex items-left justify-left mb-2 text-sm dark:text-white">
    🗓️ &nbsp; <span class="text-sm dark:text-white" id="currentDateWithoutYear"
    ></span>
  </div>
</div>
<div
  id="remainingToIftarContainer"
  class="max-w-4xl mx-auto rounded-md bg-orange-50 p-4 dark:bg-gray-800"
>
  <div class="rounded-md bg-orange-50 p-4 dark:bg-gray-800">
    <div class="flex items-center justify-center">
      <div
        id="remainingToIftar"
        class="text-4xl font-medium text-orange-800 dark:text-orange-300"
      >
      </div>
    </div>
  </div>
</div>
<div class="relative max-w-4xl mx-auto">
  <div
    id="remainingToImsakContainer"
    class="rounded-md bg-blue-50 p-3 dark:bg-gray-800 hidden"
  >
    <div class="rounded-md bg-blue-50 p-4 dark:bg-gray-800">
      <div class="flex items-center justify-center">
        <div
          id="remainingToImsak"
          class="text-4xl font-medium text-blue-800 dark:text-blue-200"
        >
        </div>
      </div>
    </div>
  </div>
  <div class="absolute bottom-0 right-0 flex justify-between items-center mt-6">
    <button
      id="shareButton"
      class="w-full py-3 px-6 text-sm font-semibold text-gray-900 bg-transparent p-4 hover:from-blue-700 hover:to-teal-600 dark:text-white dark:from-gray-700 dark:to-gray-900 dark:hover:from-gray-600 dark:hover:to-gray-800 rounded-lg transition duration-300 ease-in-out"
    >
      <ion-icon name="share-social-outline"></ion-icon>
    </button>
  </div>
</div>

<div class="mt-6 max-w-4xl mx-auto">
  <div class="bg-white dark:bg-gray-700 shadow-lg rounded-lg overflow-hidden">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">
        İmsak ve İftar Vakitleri
      </h3>
      <div class="mt-2 max-w-xl text-sm text-gray-500 dark:text-gray-400"></div>
      <div class="mt-5">
        <div
          id="imsakContainer"
          class="rounded-md bg-blue-50 p-4 dark:bg-gray-800"
        >
          <div class="flex items-center justify-between">
            <div class="text-sm font-medium text-blue-800 dark:text-blue-200">
              🌙 &nbsp; İmsak Vakti
            </div>
            <div
              class="text-lg font-semibold text-blue-900 dark:text-blue-300"
              id="imsakTime"
            >
            </div>
          </div>
        </div>
        <div
          id="iftarContainer"
          class="mt-3 rounded-md bg-orange-50 p-4 dark:bg-gray-800"
        >
          <div class="flex items-center justify-between">
            <div
              class="text-sm font-medium text-orange-800 dark:text-orange-300"
            >
              🕌 &nbsp; İftar Vakti
            </div>
            <div
              class="text-lg font-semibold text-orange-900 dark:text-orange-300"
              id="iftarTime"
            >
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="max-w-4xl mx-auto mt-6">
  <article
    class="bg-white dark:bg-gray-700 shadow-lg rounded-lg overflow-hidden"
  >
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">
        Günün Ayeti
      </h3>
      <div class="mt-5">
        <div class="mt-3 rounded-md bg-orange-50 p-4 dark:bg-gray-800 relative">
          <div
            id="gununAyeti"
            class="text-sm italic text-gray-900 dark:text-white"
          >
          </div>
          <span
            id="gununAyetiSure"
            class="text-sm italic text-orange-900 dark:text-red-300"
          >
          </span>
          <div
            class="absolute bottom-0 right-0 flex justify-between items-center mt-6"
          >
            <button
              id="shareAyet"
              class="text-sm font-semibold text-gray-900 bg-transparent p-3 hover:from-blue-700 hover:to-teal-600 dark:text-white dark:from-gray-700 dark:to-gray-900 dark:hover:from-gray-600 dark:hover:to-gray-800 rounded-lg transition duration-300 ease-in-out"
            >
              <ion-icon name="share-social-outline"></ion-icon>
            </button>
          </div>
        </div>
      </div>
    </div>
  </article>
</div>

<div
  id="installModal"
  class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 backdrop-blur-sm"
>
  <div class="flex items-center justify-center min-h-screen">
    <div
      role="dialog"
      aria-modal="true"
      aria-labelledby="modalTitle"
      class="relative mx-auto p-5 w-full max-w-md shadow-xl rounded-md bg-white dark:bg-gray-700 transition duration-300 ease-in-out"
    >
      <div class="text-center">
        <h3
          id="modalTitle"
          class="text-lg leading-6 font-medium text-gray-900 dark:text-white"
        >
          Uygulamamızı Yükleyin
        </h3>
        <div class="mt-2 px-7 py-3">
          <p class="text-sm text-gray-500 dark:text-gray-200">
            Uygulama olarak kullanmanız çok daha efektif olacaktır.
          </p>
        </div>
        <div class="mt-4 flex justify-center gap-4">
          <button
            id="confirmInstall"
            class="px-4 py-2 bg-orange-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-orange-800 focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-150 ease-in-out"
          >
            Yükle
          </button>
          <button
            id="cancelInstall"
            class="px-4 py-2 bg-white text-blue-700 text-base font-medium rounded-md shadow-sm hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
          >
            Sonra
          </button>
        </div>
      </div>
      <div class="absolute top-0 right-0 pt-4 pr-4">
        <button
          id="closeModal"
          aria-label="Close"
          class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        >
          <ion-icon name="close-outline"></ion-icon>
        </button>
      </div>
    </div>
  </div>

  <div
    id="AyetModal"
    class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 backdrop-blur-sm"
  >
    <div class="flex items-center justify-center min-h-screen">
      <div
        role="dialog"
        aria-modal="true"
        aria-labelledby="modalTitle"
        class="relative mx-auto p-5 w-full max-w-md shadow-xl rounded-md bg-white dark:bg-gray-700 transition duration-300 ease-in-out"
      >
        <div class="text-center">
          <h3
            id="modalTitle"
            class="text-lg leading-6 font-medium text-gray-900 dark:text-white"
          >
          </h3>
          <div class="mt-2 px-7 py-3">
            <p class="text-sm text-gray-500 dark:text-gray-200">
            </p>
          </div>
          <div class="mt-4 flex justify-center gap-4">
            <button
              id="copyAyet"
              class="px-4 py-2 bg-orange-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-orange-800 focus:outline-none focus:ring-2 focus:ring-orange-500 transition duration-150 ease-in-out"
            >
              Yükle
            </button>
          </div>
        </div>
        <div class="absolute top-0 right-0 pt-4 pr-4">
          <button
            id="closeModal"
            aria-label="Close"
            class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            <ion-icon name="close-outline"></ion-icon>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
  <footer
    class="max-w-4xl mx-auto flex justify-between items-center mt-12 text-sm text-gray-500 dark:text-gray-400"
  >
    <p>
      © 2024 created by <span
        class="text-pink-300 underline decoration-dashed italic">BYK</span
      >
    </p>
    <div>
      <button
        id="themeToggle"
        class="py-2 px-4 text-white rounded bg-gray-50 hover:bg-gray-50 dark:hover:bg-gray-800 hover:text-gray-900 dark:bg-gray-800 transition duration-300 ease-in-out"
      ></button>
    </div>
  </footer>


  
  <script
    type="module"
    src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"
  ></script>
  <script
    nomodule
    src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const isSafari = () =>
        /Safari/.test(navigator.userAgent) &&
        /Apple Computer, Inc./.test(navigator.vendor) &&
        !/Chrome|Chromium/.test(navigator.userAgent);
      const shouldDisplayInstallPrompt = () => !window.navigator.standalone;
      let cityData = {};

      const addInstallPromptForSafari = () => {
        if (isSafari() && shouldDisplayInstallPrompt()) {
          const container = document.createElement("div");
          container.className =
            "max-w-4xl mx-auto flex justify-center items-center mt-12 text-sm text-gray-500 dark:text-gray-400";
          container.innerHTML = `<p>Uygulamamızı; Paylaş -> Ana Ekrana ekle -> Ekle adımlarını takip ederek indirebilirsiniz.</p>`;
          document.body.appendChild(container);
        }
      };

      addInstallPromptForSafari();

      const root = document.documentElement;
      const modalElements = {
        installModal: document.getElementById("installModal"),
        confirmInstall: document.getElementById("confirmInstall"),
        cancelInstall: document.getElementById("cancelInstall"),
        closeModal: document.getElementById("closeModal"),
      };
      let beforeInstallPromptEvent = null;

      window.addEventListener("beforeinstallprompt", function (e) {
        e.preventDefault();
        beforeInstallPromptEvent = e;
        modalElements.installModal.classList.toggle(
          "hidden",
          !beforeInstallPromptEvent
        );
      });

      modalElements.confirmInstall.addEventListener("click", () =>
        handleInstallDecision(true)
      );
      modalElements.cancelInstall.addEventListener("click", () =>
        resetInstallPrompt()
      );
      modalElements.closeModal.addEventListener("click", () =>
        resetInstallPrompt()
      );

      function handleInstallDecision(isConfirmed) {
        if (!beforeInstallPromptEvent) return;
        if (isConfirmed) {
          beforeInstallPromptEvent.prompt();
          beforeInstallPromptEvent.userChoice.then(() => {
            resetInstallPrompt();
          });
        } else {
          resetInstallPrompt();
        }
      }

      function resetInstallPrompt() {
        modalElements.installModal.classList.add("hidden");
        beforeInstallPromptEvent = null;
      }

      const themeToggle = setupThemeToggle();
      const citySelect = document.getElementById("citySelect");
      const savedCity = localStorage.getItem("selectedCity");

      if (!savedCity) {
        loadCityData("Istanbul");
      } else {
        citySelect.value = savedCity;
        loadCityData(savedCity);
      }

      citySelect.addEventListener("change", function () {
        const selectedCity = this.value;
        localStorage.setItem("selectedCity", selectedCity);
        loadCityData(selectedCity);
      });

      function loadCityData(city) {
        const jsonFileName = `/cities/${city}.json`;

        fetch(jsonFileName)
          .then((response) => response.json())
          .then((data) => {
            cityData = data;
            updateTheme();
            const prayerTimesElements = setupPrayerTimesElements();
            updateDateTimeDisplays(prayerTimesElements, cityData);
          })
          .catch((error) =>
            console.error("Error loading the JSON file:", error)
          );
      }

      setInterval(() => {
        const prayerTimesElements = setupPrayerTimesElements();
        if (Object.keys(cityData).length > 0) {
          updateDateTimeDisplays(prayerTimesElements, cityData);
        }
      }, 1000);

      function setupThemeToggle() {
        const toggle = document.getElementById("themeToggle");
        toggle.addEventListener("click", () => {
          const newTheme = root.classList.toggle("dark") ? "dark" : "light";
          localStorage.setItem("theme", newTheme);
          toggle.textContent = newTheme === "dark" ? "💡" : "🌑";
        });
        return toggle;
      }

      function updateTheme() {
        const preferredTheme =
          localStorage.getItem("theme") ||
          (window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light");
        root.classList.toggle("dark", preferredTheme === "dark");
        themeToggle.textContent = preferredTheme === "dark" ? "💡" : "🌑";
      }

      function setupPrayerTimesElements() {
        return {
          imsakTimeEl: document.getElementById("imsakTime"),
          iftarTimeEl: document.getElementById("iftarTime"),
          currentDateEl: document.getElementById("currentDateWithoutYear"),
          currentTimeEl: document.getElementById("currentTime"),
          imsakContainer: document.getElementById("remainingToImsakContainer"),
          iftarContainer: document.getElementById("remainingToIftarContainer"),
          remainingToImsakEl: document.getElementById("remainingToImsak"),
          remainingToIftarEl: document.getElementById("remainingToIftar"),
        };
      }

      function formatDate(date) {
        return date.toISOString().split("T")[0];
      }

      function dateFromTimeStr(now, timeStr) {
        const [hour, minute] = timeStr.split(":").map(Number);
        return new Date(
          now.getFullYear(),
          now.getMonth(),
          now.getDate(),
          hour,
          minute
        );
      }

      function formatRemainingTime(milliseconds) {
        const hours = Math.floor(milliseconds / (1000 * 60 * 60));
        const minutes = Math.floor(
          (milliseconds % (1000 * 60 * 60)) / (1000 * 60)
        );
        const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);
        return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
      }

      function updateDateTimeDisplays(prayerTimesElements, times) {
        const now = new Date();
        const todayFormatted = formatDate(now);
        const tomorrowFormatted = formatDate(
          new Date(now.getTime() + 86400000)
        );

        const isAfterMidnight = now.getHours() < 3;

        let todayTimes = times[todayFormatted] || {
          imsak: "N/A",
          iftar: "N/A",
        };
        let tomorrowTimes = times[tomorrowFormatted] || todayTimes;

        if (isAfterMidnight) {
          todayTimes = tomorrowTimes;
        }

        const currentIftarDate = dateFromTimeStr(now, todayTimes.iftar);
        const isCurrentTimeAfterIftarOrMidnight =
          now >= currentIftarDate || isAfterMidnight;

        const { imsak, iftar } = isCurrentTimeAfterIftarOrMidnight
          ? tomorrowTimes
          : todayTimes;

        prayerTimesElements.imsakTimeEl.textContent = imsak;
        prayerTimesElements.iftarTimeEl.textContent = iftar;
        prayerTimesElements.currentDateEl.textContent = now.toLocaleDateString(
          "tr-TR",
          { weekday: "long", month: "long", day: "numeric" }
        );
        prayerTimesElements.currentTimeEl.textContent = now.toLocaleTimeString(
          "tr-TR",
          { hour: "2-digit", minute: "2-digit" }
        );

        const imsakDate =
          now > dateFromTimeStr(now, todayTimes.iftar)
            ? dateFromTimeStr(
                new Date(now.getTime() + 86400000),
                tomorrowTimes.imsak
              )
            : dateFromTimeStr(now, imsak);
        const iftarDate = dateFromTimeStr(now, iftar);
        const remainingToImsak = imsakDate - now;
        const remainingToIftar = iftarDate - now;
        const remaining =
          now < imsakDate
            ? formatRemainingTime(remainingToImsak)
            : formatRemainingTime(remainingToIftar);
        const isIftarTime = now >= imsakDate && now < iftarDate;

        prayerTimesElements.imsakContainer.classList.toggle(
          "hidden",
          isIftarTime
        );
        prayerTimesElements.iftarContainer.classList.toggle(
          "hidden",
          !isIftarTime
        );
        (isIftarTime
          ? prayerTimesElements.remainingToIftarEl
          : prayerTimesElements.remainingToImsakEl
        ).textContent = remaining;
      }

      function loadAyetData() {
        const todayFormatted = formatDate(new Date());
        fetch("/ayet/ayet.json")
          .then((response) => response.json())
          .then((data) => {
            if (data[todayFormatted]) {
              document.getElementById("gununAyeti").textContent =
                "📖 " + data[todayFormatted].gununAyeti;
              document.getElementById("gununAyetiSure").textContent =
                data[todayFormatted].gununAyetiSure;
            } else {
              console.error("Günün ayeti bulunamadı.");
            }
          })
          .catch((error) =>
            console.error("Ayet bilgileri yüklenirken bir hata oluştu:", error)
          );
      }

      loadAyetData();

      function shareRemainingTime() {
        let prayer;
        let remainingTime;
        let city = citySelect.value;
        let shareText = `${prayer}'a Kalan süre: ${remainingTime}`;
        if (
          !document
            .getElementById("remainingToImsakContainer")
            .classList.contains("hidden")
        ) {
          prayer = "İmsak";
          remainingTime =
            document.getElementById("remainingToImsak").textContent;
          shareText = `🌅 ${city} için ${prayer}'a kalan süre: ${remainingTime}. \n Bu özel anı ramazan.app üzerinden takip edin ve sevdiklerinizle paylaşın! \n\n #İmsak #Ramazan \n\n`;
        } else {
          prayer = "İftar";
          remainingTime =
            document.getElementById("remainingToIftar").textContent;
          shareText = `🌙 ${city} için ${prayer}'a kalan süre: ${remainingTime}. \n Bu özel anı ramazan.app üzerinden takip edin ve sevdiklerinizle paylaşın! \n\n #İftar #Ramazan \n\n`;
        }

        if (navigator.share) {
          navigator
            .share({
              title: `${prayer}'a kalan süre`,
              text: shareText,
              url: "https://ramazan.app",
            })
            .then(() => console.log("Teşekkürler!"))
            .catch(console.error);
        } else {
          alert(`Tarayıcınız uygun değil`);
        }
      }

      const shareButton = document.getElementById("shareButton");
      shareButton.addEventListener("click", shareRemainingTime);

      function shareVerseOfTheDay() {
        const verseElement = document.getElementById("gununAyeti");
        const verseSurahElement = document.getElementById("gununAyetiSure");
        const verse = verseElement.textContent;
        const surah = verseSurahElement.textContent;
        const shareText = `Günün Ayeti: "${verse}" - ${surah}. \n\n`;

        if (navigator.share) {
          navigator
            .share({
              title: `Günün Ayeti`,
              text: shareText,
              url: "https://ramazan.app",
            })
            .then(() => console.log("Başarıyla paylaşıldı!"))
            .catch(console.error);
        } else {
          alert(`Tarayıcınız uygun değil`)        

        }
      }

      const shareAyetButton = document.getElementById("shareAyet");
      shareAyetButton.addEventListener("click", shareVerseOfTheDay);
    });
  </script>
</div>
